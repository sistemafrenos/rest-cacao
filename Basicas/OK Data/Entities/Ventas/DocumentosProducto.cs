//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HK
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using HK.BussinessLogic;

    public partial class DocumentosProducto: Entity
    {
        public DocumentosProducto()
        {
            momento  = DateTime.Now;
            Fecha = DateTime.Today;
            TasaIva = OK.SystemParameters.TasaIva;
            Costo = 0;
            Precio = 0;
            Cantidad = 1;
            Presentacion = "UNIDAD";
            UnidadesxEmpaque = 1;
        }
        [MaxLength(40)]
        [Required(ErrorMessage = "Producto Invalido")]
        public string ProductoID { get; set; }
        [MaxLength(40)]
        [Required(ErrorMessage = "La codigo es obligatorio")]
        public string Codigo { get; set; }
        [MaxLength(40)]
        public string CodigoProveedor { get; set; }
        [MaxLength(160)]
        public string Descripcion { get; set; }
        [MaxLength(40)]
        public string UnidadMedida { get; set; }
        [Required(ErrorMessage = "La cantidad es obligatoria")]
        public Nullable<double> Cantidad { get; set; }
        [MaxLength(20)]
        public string Presentacion { set; get; }
        public Nullable<double> UnidadesxEmpaque { set; get; }
        public Nullable<double> Inicio { get; set; }
        public Nullable<double> Entrada { get; set; }
        public Nullable<double> Salida { get; set; }
        public Nullable<double> Final { get; set; }
        public Nullable<double> Precio { get; set; }
        public Nullable<double> Utilidad { get; set; }
        public Nullable<double> TasaIva { get; set; }
        public Nullable<double> PrecioConIva { get; set; }
        public Nullable<double> Total { get; set; }
        public Nullable<double> Costo { get; set; }
        public Nullable<double> CostoIva { get; set; }
        public Nullable<double> Precio2 { get; set; }
        public Nullable<double> PrecioConIva2 { get; set; }
        public Nullable<double> Utilidad2 { get; set; }
        public Nullable<double> Precio3 { get; set; }
        public Nullable<double> PrecioConIva3 { get; set; }
        public Nullable<double> Utilidad3 { get; set; }
        public Nullable<double> Precio4 { get; set; }
        public Nullable<double> PrecioConIva4 { get; set; }
        public Nullable<double> Utilidad4 { get; set; }
        public Nullable<double> CostoNeto { get; set; }
        public Nullable<double> ImpuestoLicores { get; set; }
        [MaxLength(80)]
        public string Departamento { get; set; }
        public Nullable<double> Iva { get; set; }
        [MaxLength(80)]
        public string Comentario { get; set; }
        public DateTime Fecha { get; set; }
        public DateTime momento { set; get; }
        public Boolean LlevaInventario { set; get; }

        public virtual Documento Documento { get; set; }

        public void Calcular()
        {
            double? MontoExento = TasaIva.GetValueOrDefault(0) == 0 ? Precio * Cantidad : 0;
            double? MontoGravable = TasaIva.GetValueOrDefault(0) > 0 ? Precio * Cantidad : 0;
            PrecioConIva = TasaIva.GetValueOrDefault(0) > 0 ? Precio + (Precio * TasaIva / 100) : Precio;
            Iva = MontoGravable.GetValueOrDefault(0) > 0 ? MontoGravable * TasaIva.GetValueOrDefault(0) / 100 : 0;
            Total = MontoGravable + MontoExento + Iva;
            Final = Inicio.GetValueOrDefault(0) + Entrada.GetValueOrDefault(0) - Salida.GetValueOrDefault(0);
        }
        public void CalcularItemFactura()
        {
            double? MontoExento = TasaIva.GetValueOrDefault(0) == 0 ? Precio * Cantidad : 0;
            double? MontoGravable = TasaIva.GetValueOrDefault(0) > 0 ? Precio * Cantidad : 0;
            PrecioConIva = TasaIva.GetValueOrDefault(0) > 0 ? Precio + (Precio * TasaIva / 100) : Precio;
            Iva = MontoGravable.GetValueOrDefault(0) > 0 ? MontoGravable * TasaIva.GetValueOrDefault(0) / 100 : 0;
            Total = MontoGravable + MontoExento + Iva;
            Final = Inicio.GetValueOrDefault(0) + Entrada.GetValueOrDefault(0) - Salida.GetValueOrDefault(0);
        }
        public void CalcularItemCompra()
        {

            Iva = Costo * TasaIva / 100;
            CostoIva = Costo + Iva;
            if (Presentacion != "UNIDAD")
                CostoNeto = (Costo + ImpuestoLicores.GetValueOrDefault(0)) / (UnidadesxEmpaque.GetValueOrDefault(1));
            else
                CostoNeto = (Costo + ImpuestoLicores.GetValueOrDefault(0));

            Total = (Cantidad * CostoIva) + ImpuestoLicores.GetValueOrDefault(0);

            PrecioConIva = TasaIva.GetValueOrDefault(0) > 0 ? Precio + (Precio * TasaIva / 100) : Precio;
            PrecioConIva2 = TasaIva.GetValueOrDefault(0) > 0 ? Precio2 + (Precio2 * TasaIva / 100) : Precio2;
            PrecioConIva3 = TasaIva.GetValueOrDefault(0) > 0 ? Precio3 + (Precio3 * TasaIva / 100) : Precio3;
            PrecioConIva4 = TasaIva.GetValueOrDefault(0) > 0 ? Precio4 + (Precio4 * TasaIva / 100) : Precio4;


            Utilidad = ProductoExtended.CalcularUtilidad(CostoNeto, Precio);
            Utilidad2 = ProductoExtended.CalcularUtilidad(CostoNeto, Precio2);
            Utilidad3 = ProductoExtended.CalcularUtilidad(CostoNeto, Precio3);
            Utilidad4 = ProductoExtended.CalcularUtilidad(CostoNeto, Precio4);
        }
    }
}
